include "stdio.h"
include "stdlib.h"
include "string.h"
include "fcntl.h"
%if darwin
include "sys/event.h"
%else
include "sys/epoll.h"
%end
include "errno.h"
include "three/c11/threads.h"
include "three/runtime/closure.h" # this should not be necessary

import Core::Collection::LinkedList

namespace Core::Event

  public
  enum Type
    Unknown
    Read
    Write
  end

  struct Monitor
    thrd_t thread
%if darwin
    Int kq
%else
    Int efd
%end
    *Core::Collection::LinkedList registration_list
  end

  private
  struct Registration
    Natural descriptor
    Type type
    *{Natural descriptor, Natural data} closure_ptr
  end

  def Monitor.enumerate_registrations({*Registration reg; Bool} closure)
    self->registration_list.enumerate(do (*Core::Collection::LinkedListNode node; Bool) {
      *Registration reg = node.get_value()

      return closure(reg)
    })
  end

  def Monitor.deliver_event(Type type, Natural descriptor, Natural data)
    # deliver the event to all matching registrations
    self.enumerate_registrations(do (*Registration reg; Bool) {
      if reg->type == type && reg->descriptor == descriptor
        printf("[Event::Monitor] received event for %p\n", reg)
        (*reg->closure_ptr)(descriptor, data)
      end

      return true
    })
  end

  def opposite_type(Type type; Type)
    switch type
    case Core::Event::Type::Read
      return Core::Event::Type::Write
    case Core::Event::Type::Write
      return Core::Event::Type::Read
    end

    return Core::Event::Type::Unknown
  end

  def event_thread_entry(*Void arg; Int)
    *Monitor monitor = arg
%if darwin
    loop
      kevent64_s ke

      memset(&ke, 0, sizeof(kevent64_s))

      Int result = kevent64(monitor->kq, null, 0, &ke, 1, 0, null)

      if ke.data == 0 && ke.flags & EV_EOF
        # TODO: It is completely wrong for this thread to exit
        printf("ERROR: kqueue thread exiting\n")
        return 1
      end

      #printf("woke for data: %lld flags: %x\n", ke.data, ke.flags)

      if ke.filter == EVFILT_READ
        monitor.deliver_event(Core::Event::Type::Read, ke.ident, ke.data)
      end

      if ke.filter == EVFILT_WRITE
        monitor.deliver_event(Core::Event::Type::Write, ke.ident, ke.data)
      end
    end
%else
    loop
      epoll_event event

      memset(&event, 0, sizeof(epoll_event))

      Int numberFds = epoll_wait(monitor->efd, &event, 1, -1)

      if numberFds != 1
        printf("ERROR: epoll_wait thread exiting\n")
        return 1
      end

      #printf("woke for event: %x \n", event.events)

      # epoll doesn't have a way to tell us how much room is available
      # for read/write operations.  So, for now, just return an arbitrary value.
      if event.events & EPOLLIN
        monitor.deliver_event(Core::Event::Type::Read, event.data.fd, 4096)
      end

      if event.events & EPOLLOUT
        monitor.deliver_event(Core::Event::Type::Write, event.data.fd, 4096)
      end
    end
%end
    return 0
  end

  public
  def monitor_create(; *Monitor)
    *Monitor monitor

    monitor = malloc(sizeof(Monitor))
%if darwin
    monitor->kq = kqueue()
%else
    # The zero means we do not need epoll's FD_CLOEXEC feature
    monitor->efd = epoll_create1(0)
%end

    monitor->registration_list = Core::Collection::linked_list_create()

    thrd_create(&monitor->thread, Core::Event::event_thread_entry, monitor)

    return monitor
  end

  private
  def prepare_descriptor(Natural descriptor; Bool)
    return fcntl(descriptor, F_SETFL, O_NONBLOCK) != -1
  end

  def Monitor.register_callback(Type type, Natural descriptor, {Natural descriptor, Natural data} closure; *Void)
    *Core::Collection::LinkedListNode node

    printf("[Event::Monitor] registering monitor callback\n")

    node = self->registration_list.find(do (*Core::Collection::LinkedListNode node; Bool) {
      *Registration reg = node.get_value()

      return reg->type == type && reg->descriptor == descriptor
    })

    if node
      printf("[Event::Monitor] already registered (%d, %d)\n", descriptor, type)
      return node.get_value()
    end

    *Registration registration = malloc(sizeof(Registration))
    registration->type = type
    registration->descriptor = descriptor
    registration->closure_ptr = three_closure_copy(closure)

    node = Core::Collection::linked_list_node_create(registration)

    printf("[Event::Monitor] registration %p for (%d, %d)\n", registration, descriptor, type)
    self->registration_list.add(node)

    return registration
  end

  def Monitor.deregister(*Registration registration; Bool)
    *Core::Collection::LinkedListNode node

    printf("[Event::Monitor] deregistering monitor callback\n")

    node = self->registration_list.find(do (*Core::Collection::LinkedListNode node; Bool) {
      return registration == node.get_value()
    })

    if node == null
      printf("[Event::Monitor] unable to find matching registration\n")
      return false
    end

    return self->registration_list.remove(node)
  end

%if darwin
  def kqueue_type_to_filter(Type type; Int)
    switch type
    case Core::Event::Type::Read
      return EVFILT_READ
    case Core::Event::Type::Write
      return EVFILT_WRITE
    end

    return 0
  end

  def Monitor.kqueue_register(Type type, Natural descriptor; Bool)
    kevent64_s ke

    memset(&ke, 0, sizeof(kevent64_s))

    ke.ident = descriptor
    ke.filter = Core::Event::kqueue_type_to_filter(type)
    ke.flags = EV_ADD | EV_ENABLE

    Core::Event::prepare_descriptor(descriptor)

    return kevent64(self->kq, &ke, 1, null, 0, 0, null) != -1
  end

  def Monitor.kqueue_deregister(Type type, Natural descriptor; Bool)
    kevent64_s ke

    memset(&ke, 0, sizeof(kevent64_s))

    ke.ident = descriptor
    ke.filter = Core::Event::kqueue_type_to_filter(type)
    ke.flags = EV_DELETE

    if kevent64(self->kq, &ke, 1, null, 0, 0, null) == -1
      printf("[Event::Monitor] Unable to disarm the event for (%d, %d) (%d)\n", descriptor, type, errno)
      return false
    end

    return true
  end
%else
  def epoll_type_to_events_mask(Type type; Int)
    switch type
    case Core::Event::Type::Read
      return EPOLLIN
    case Core::Event::Type::Write
      return EPOLLOUT
    end
  end

  def Monitor.epoll_existing_events(Natural descriptor; Natural)
    Natural existing_epoll_events = 0

    self.enumerate_registrations(do (*Registration reg; Bool; existing_epoll_events) {
      # if we find a match on this descriptor, set the corresponding event bit
      if reg->descriptor == descriptor
        existing_epoll_events = existing_epoll_events | Core::Event::epoll_type_to_events_mask(reg->type)
      end

      # stop scanning if both bits are set
      return existing_epoll_events != (EPOLLIN | EPOLLOUT)
    })

    return existing_epoll_events
  end

  def Monitor.epoll_ctl(Natural ctl_op, Natural descriptor, Natural events; Bool)
    return true if ctl_op == 0

    epoll_event event

    memset(&event, 0, sizeof(epoll_event))

    event.data.fd = descriptor
    event.events = events

    if epoll_ctl(self->efd, ctl_op, descriptor, &event) == -1
      printf("[Event::Monitor] Unable to arm the event %d\n", errno)
      return false
    end

    return true
  end
%end

  public
  def Monitor.watch(Type type, Natural descriptor, {Natural descriptor, Natural data} closure; *Void)
%if darwin
    if Core::Event::prepare_descriptor(descriptor) == false
      printf("[Event::Monitor] Unable prepare descriptor\n")
      return null
    end

    if self.kqueue_register(type, descriptor) == false
      printf("[Event::Monitor] Unable to arm the event %d\n", errno)
      return null
    end
%else
    Natural existing_epoll_events = self.epoll_existing_events(descriptor)
    Natural ctl_op = 0
    Natural epoll_event = Core::Event::epoll_type_to_events_mask(type)

    switch existing_epoll_events
    case 0 # nothing exists yet, we do a simple add
      ctl_op = EPOLL_CTL_ADD
      Core::Event::prepare_descriptor(descriptor)
    case epoll_event # already have a registration for this event type
      ctl_op = 0
    case Core::Event::epoll_type_to_events_mask(Core::Event::opposite_type(type))
      # we've got the opposite type set, so we need to do a modify
      ctl_op = EPOLL_CTL_MOD
      epoll_event = EPOLLIN | EPOLLOUT
      printf("[Event::Monitor] moding existing descriptor %d\n", descriptor)
    case EPOLLIN | EPOLLOUT
      # both are set, nothing to do but record the new registration
      ctl_op = 0
    end

    self.epoll_ctl(ctl_op, descriptor, epoll_event)
%end

    return self.register_callback(type, descriptor, closure)
  end

  def Monitor.unwatch(*Void registration_ptr)
    *Registration registration = registration_ptr

    if self.deregister(registration) == false
      return
    end

%if darwin
    # for kqueues we need to simply delete the event from the kqueue
    self.kqueue_deregister(registration->type, registration->descriptor)
%else
    # for epoll, we've got to:
    # - check to see if there are existing registrations
    # - if we find none, delete the event
    # - if we find only the opposite type, mod the event
    # - if we find both, leave it alone
    Natural existing_epoll_events = self.epoll_existing_events(registration->descriptor)
    Natural ctl_op = 0
    Natural epoll_event = Core::Event::epoll_type_to_events_mask(registration->type)

    switch existing_epoll_events
    case 0 # none, we can do a delete
      ctl_op = EPOLL_CTL_DEL
    case epoll_event # another registration exists for this type
      ctl_op = 0
    case Core::Event::epoll_type_to_events_mask(Core::Event::opposite_type(registration->type))
      # we've got the opposite type set, so we need to do a modify
      ctl_op = EPOLL_CTL_MOD
      epoll_event = Core::Event::epoll_type_to_events_mask(Core::Event::opposite_type(registration->type))
      printf("[Event::Monitor] moding existing descriptor %d\n", registration->descriptor)
    case EPOLLIN | EPOLLOUT
      # both are set, nothing to do
      ctl_op = 0
    end

    self.epoll_ctl(ctl_op, registration->descriptor, epoll_event)
%end

    printf("[Event::Monitor] Disarmed event for descriptor %d\n", registration->descriptor)
  end

end
